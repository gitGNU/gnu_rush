\input texinfo @c -*-texinfo-*-
@smallbook
@c %**start of header
@setfilename rush.info
@settitle Rush -- a restricted user shell.
@c %**end of header
@setchapternewpage odd

@defcodeindex pr
@defcodeindex op
@defcodeindex kw
@defcodeindex fl

@syncodeindex fn cp
@syncodeindex vr cp
@syncodeindex ky cp
@syncodeindex pg cp
@syncodeindex tp cp
@syncodeindex op cp
@syncodeindex pr cp
@syncodeindex kw cp
@syncodeindex fl cp

@include version.texi
@include rendition.texi

@ifinfo
@dircategory System Administration Utilities
@direntry
* rush (rush).          A restricted user shell.
@end direntry
@end ifinfo

@copying
Published by the Free Software Foundation,
51 Franklin Street, Fifth Floor,
Boston, MA 02110-1301 USA 

Copyright @copyright{} 2008 Sergey Poznyakoff

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover texts being ``Rush -- a
restricted user shell'' and with the Back-Cover Texts as in (a) below.
A copy of the license is included in the section entitled ``GNU Free
Documentation License''. 

(a) The FSF's Back-Cover Text is: ``You have freedom to copy and modify
this GNU Manual, like GNU software.  Copies published by the Free
Software Foundation raise funds for GNU development.''
@end copying

@titlepage
@title Rush -- a restricted user shell
@subtitle version @value{VERSION}, @value{UPDATED}
@author Sergey Poznyakoff
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@page
@summarycontents
@page
@contents

@ifnottex
@node Top
@top Rush

This edition of the @cite{Rush Manual}, last updated @value{UPDATED},
documents Rush Version @value{VERSION}.

@end ifnottex

@menu
* Intro::
* Operation::
* Quick Start::
* Configuration File::
* Usage Tips::
* Test Mode::
* Option Summary::
* Rushwho::              The @code{rushwho} utility.
* Rushlast::             The @code{rushlast} utility.
* Accounting Database::
* Reporting Bugs::       How to Report a Bug.

Appendices

* Time and Date Formats::
* Copying This Manual::  The GNU Free Documentation License.
* Concept Index::        Index of Concepts.

@detailmenu
 --- The Detailed Node Listing ---

Configuration File

* Syntax::
* Rule::
* Debugging::
* Regex::
* Sleep Time::
* Error Messages::

Rule

* Conditions::
* Transformations::
* System Actions::
* Environment::
* Fall-through::
* Accounting and Forked Mode::
* Exit::

Usage Tips

* scp::
* rsync::
* sftp::
* cvs::
* svn::
* git::

The @code{rushwho} utility.

* Rushwho Options::
* Formats::

The @code{rushlast} utility.

* Rushlast Options::

Accounting Database

* wtmp::        The Structure of @file{wtmp} File.
* utmp::        The Structure of @file{wtmp} File.

@end detailmenu
@end menu

@node Intro
@chapter Introduction
  Rush is a Restricted User Shell, designed for sites that provide
limited remote access to their resources, such as svn or git  
repositories, scp, or the like.  Using a sophisticated configuration
file, Rush gives you complete control over the command lines that
users execute, as well as over the usage of system resources, such as 
virtual memory, CPU time, etc.

@node Operation
@chapter Operation
  Rush is usually installed as a user shell.  When a user connects to
the server (e.g. by using using SSH protocol), the shell binary,
@command{rush}, is executed.  Rush must be called with exactly two
arguments: the @option{-c} command line option and a command line to
be executed on the host machine.  If wrong arguments are supplied, the
shell aborts.

@cindex request
  The third argument to @command{rush} supplies a command line to be
executed.  This command line along with the password database entry
for the user who executes @command{rush} are said to form a
@dfn{request}.

@cindex rule
@cindex conditions
@cindex actions
  After startup, @command{rush} reads a set of @dfn{rules} from its
configuration file.  Each rule consists of conditions
and actions.  @dfn{Conditions} are used to match the rule
with the request.  They can include regular expression matching
with entire command line or particular fields thereof, user name or
group comparisons, etc.  If all conditions match the request, 
actions are executed.  @dfn{Actions} allow to:

@itemize @bullet
@item Modify the command line;
@item Impose resource limits;
@item Set umask;
@item Change current working directory;
@item Modify the execution environment;
@item Run command in a special root directory (@samp{chroot}).
@end itemize

  Finally, after all actions have been executed successfully, @command{rush}
executes the requested command.  Notice, that the resulting command
line is not necessarily the same as was supplied to @command{rush} via
the @option{-c} option.

@cindex fall-through rule
@cindex rule, fall-through
  A special kind of rules, called @dfn{fall-through} ones, is
provided.  Fall-through rules differ from other rules in that they do
not execute the command.  After all actions in a fall-through rule
have been executed, Rush continues to search for another matching rule
in its configuration and applies it, if found.  Fall-through rules
are useful to set default values for subsequent rules.

@node Quick Start
@chapter Quick Start
  To give you the feel of Rush possibilities, let's consider the
following configuration file rule:

@smallexample
@group
rule sftp
  # Conditions:
  command ^.*/sftp-server
  uid >= 100
  # Actions:
  transform[0] s,.*,bin/sftp-server,
  umask 002
  chroot ~
  chdir /
@end group
@end smallexample

  The first clause, @code{rule}, defines a new rule.  Its argument
serves as a rule tag, used for diagnostic messages and for accounting.

  Lines beginning with @samp{#} are comments, they are intended for a
human reader and are ignored by @code{rush}.
 
  The two statements that follow the comment, @code{command} and
@code{uid}, define conditions that must be met for this rule to become
active.  The @code{command} statement introduces a regular expression
to match with the command line.  In this example, the command line must
begin with @samp{/sftp-server}, optionally preceded by arbitrary
directory components. 

  The @code{uid} statement tells that this rule applies only to users
whose @acronym{UID}s are greater than or equal to 100. 

  Subsequent clauses define actions associated with this rule.

  The @code{transform[0]} clause contains instructions on how to
modify the first argument of the command line (i.e. the command
name).  These instructions are in the form of @code{sed} replace
expression (@pxref{Transformations, transformation expression}).  The
expression in our example instructs Rush to replace the command name with
@samp{bin/sftp-server}. 

  The @code{umask} clause sets the file creation mask.

  The @code{chroot} clause instructs Rush to chroot to the user home
directory before executing the command.

  Finally, the @code{chdir} statement sets the directory to change to
after installing the chroot.

@node Configuration File
@chapter Configuration File
@flindex rush.rc
  The configuration file is called @file{rush.rc} and is located in
@file{/usr/local/etc} by default.@footnote{The exact location of the
configuration file is defined when configuring the package.  See the
file @file{INSTALL} in the Rush source directory for more information}.

  The configuration file is read and parsed right after start up.  Any
errors occurred in parsing are reported using @code{syslog} facility
@samp{authpriv} and priority @samp{notice}.  When run in @samp{test}
mode, all diagnostics is displayed on standard error
output. @xref{Test Mode}, for a detailed description of ways to debug
and test your configurations.

@menu
* Syntax::
* Rule::
* Debugging::
* Regex::
* Sleep Time::
* Error Messages::
@end menu

@node Syntax
@section Syntax
@cindex syntax, configuration files
@cindex configuration file syntax
  Configuration file consists of statements and comments.  

  A @dfn{comment} is any line whose first non-whitespace character is
@samp{#}.  Empty lines and comments are ignored.

  A @dfn{statement} consists of a keyword and an optional value.  If the
value is supplied, it must be separated from the keyword by any amount
of white space.  Statements are delimited by newline characters.
Length of a statement line is not limited.  Long statements
can be split over several lines by using backslash (@samp{\}) as a
last character on line.  Thus, the following statement:

@smallexample
usage-error Contact your\
 system administrator
@end smallexample

@noindent
is equivalent to:

@smallexample
usage-error Contact your system administrator
@end smallexample

@node Rule
@section Rule
@cindex @code{rule} statement
  The @code{rule} statement configures a Rush rule.  This is a
@dfn{block} statement, which means that all statements located between
it and the next @code{rule} statement (or end of file, whichever
occurs first) modify the definition of the rule.

@kwindex rule
  The syntax of the @code{rule} statement is:

@deffn {Configuration} rule @var{tag}
@end deffn

@cindex rule tag
@cindex tag, rule
The @var{tag} argument is optional.  If it is given, it supplies a
@dfn{tag} for the rule, i.e. a (presumably unique) identifier, which
is used to label this rule.  Rush uses this tag in its diagnostic
messages.  For rules without explicit @var{tag}, Rush supplies a
default tag, which is constructed by concatenating @samp{#} character
and the ordinal number of rule in the configuration file, in decimal
notation.  Rule numbering begins from @samp{1}.

The following sub-sections describe the statements that can be used
within a @code{rule}.

@menu
* Conditions::
* Transformations::
* System Actions::
* Environment::
* Fall-through::
* Accounting and Forked Mode::
* Exit::
@end menu

@node Conditions
@subsection Conditions
@cindex conditions
  These statements define conditions that are used to match the rule with
the request.  A rule may contain any number of conditions.  All
conditions are tested in order of their appearance in the rule and are
tied together using boolean shortcut @samp{and} evaluation: if any of
them yields false, the rest is not evaluated and control is
transferred to the subsequent rule. 

@deffn {Rule Config} command @var{regex}
True, if the current command line matches regular expression
@var{regex}.  

For example:

@smallexample
command ^scp (-v )?-t /incoming/(alpha|ftp)
@end smallexample

By default, @acronym{POSIX} extended regular expressions are used.
This, however can be changed using @code{regex} statement (@pxref{Regex}).
@end deffn

@deffn {Rule Config} match[@var{n}] @var{regexp}
True, if @var{n}th @dfn{word} from the command line matches
regular expression @var{regexp}.  Notice, that square brackets form
part of the statement syntax.  A special value @samp{$} can be used
instead of @var{n} to denote the last word.  Unless changed by
previous @code{regex} statement (@pxref{Regex}), @acronym{POSIX}
extended regular expressions are used. 

The command line is split into words using the same rules as used in
@code{/bin/sh}.

For example, the condition below yields true if the last argument is
an absolute path name:

@smallexample
match[$] ^/.*
@end smallexample
@end deffn

@deffn {Rule Config} argc @var{op} @var{num}
Compare the number of command line arguments to @var{num}.
The comparison operator is given by @var{op}, which can be one 
of the following: @samp{=} (or @samp{==}), @samp{!=}, @samp{<},
@samp{<=}, @samp{>}, @samp{>=}.

For example, the following condition matches if the number of
arguments is less than 3:

@smallexample
argc < 3
@end smallexample
@end deffn

@deffn {Rule Config} uid @var{op} @var{num}
Compare current @acronym{UID} to @var{num}.
The comparison operator is given by @var{op}, which can be one 
of the following: @samp{=} (@samp{==}), @samp{!=}, @samp{<},
@samp{<=}, @samp{>}, @samp{>=}.
@end deffn

@deffn {Rule Config} gid @var{op} @var{num}
Compare current @acronym{GID} to @var{num}.
The comparison operator is given by @var{op}, which can be one
of the following: @samp{=} (@samp{==}), @samp{!=}, @samp{<},
@samp{<=}, @samp{>}, @samp{>=}.
@end deffn

@deffn {Rule Config} user @var{names}
Argument is a whitespace-separated list of user names.  This condition
yields true, if the user name matches one of the listed names.
String comparisons are case-sensitive.
@end deffn

@deffn {Rule Config} group @var{names}
Argument is a whitespace-separated list of group names.  This condition
yields true, if the the name of any group the user is a member of
matches one of listed names. String comparisons are case-sensitive.

For example, to match users from groups @samp{admin} and @samp{root}:

@smallexample
group admin root
@end smallexample
@end deffn

  Each condition allows for a negated form, by placing an exclamation
sign between the condition keyword and expression.  For example:

@table @code
@item command ^scp
True, if command line begins with @samp{scp}.

@item command ! ^scp
True if command line does not begin with @samp{scp}.
@end table

@node Transformations
@subsection Transformations
@cindex transformations
  Special actions that allow to rewrite command line are called
@dfn{transformations}.

@deffn {Rule Config} transform @var{expr}
Apply expression @var{expr} to entire command line.
@end deffn

@deffn {Rule Config} transform[@var{n}] @var{expr}
Apply expression @var{expr} to @var{n}th @dfn{word} from the
command line.  Notice, that square brackets are part of the statement
syntax.  A special value @samp{$} can be used instead of @var{n} to
denote the last word. 
@end deffn

The transformation expression, @var{expr}, is a @command{sed}-like
replace expression of the form:

@smallexample
s/@var{regexp}/@var{replace}/[@var{flags}]
@end smallexample

@noindent
where @var{regexp} is a @dfn{regular expression}, @var{replace} is a
replacement for each file name part that matches @var{regexp}.  Both
@var{regexp} and @var{replace} are described in detail in
@ref{The "s" Command, The "s" Command, The `s' Command, sed, GNU sed}.

As in @command{sed}, you can give several replace expressions,
separated by a semicolon.

Supported @var{flags} are:

@table @samp
@cindex g, @option{transform} flag
@item g
Apply the replacement to @emph{all} matches to the @var{regexp}, not
just the first.

@cindex i, @option{transform} flag
@item i
Use case-insensitive matching

@cindex x, @option{transform} flag
@item x
@var{regexp} is an @dfn{extended regular expression} (@pxref{Extended
regexps, Extended regular expressions, Extended regular expressions,
sed, GNU sed}).

@item @var{number}
Only replace the @var{number}th match of the @var{regexp}.

Note: the @acronym{POSIX} standard does not specify what should happen
when you mix the @samp{g} and @var{number} modifiers.  Rush
follows the GNU @command{sed} implementation in this regard, so
the interaction is defined to be: ignore matches before the
@var{number}th, and then match and replace all matches from the
@var{number}th on.
@end table

Any delimiter can be used in lieue of @samp{/}, the only requirement being
that it be used consistently throughout the expression. For example,
the following two expressions are equivalent:

@smallexample
@group
transform s/one/two/
transform s,one,two,
@end group
@end smallexample

  Changing delimiters is often useful when the @var{regex} contains
slashes.  For instance, it is more convenient to write @code{s,/,-,} than
@code{s/\//-/}.

  For example, the following rule uses @code{transform} to ensure that
@file{/usr/bin/cvs} binary is used:

@smallexample
@group
rule cvs
  command ^cvs server
  transform[0] s|.*|/usr/bin/cvs|
@end group
@end smallexample

 As a more complex example, consider the following rule:

@smallexample
@group
rule svn
  command ^svnserve -t
  transform s|-r *[^ ]*||;s|^svnserve |/usr/bin/svnserve -r /svnroot |
@end group
@end smallexample

  This transform expression first removes all occurrences of
@option{-r} option and its arguments from the command line, and then
adds its own @option{-r} option and replaces @samp{svnserve} with a
full name of the program.

@node System Actions
@subsection System Actions
@cindex system actions
@cindex actions, system

System actions provide an interface to the operating system.

@deffn {Rule Config} umask @var{mask}
Set the umask.  The @var{mask} must be an octal value not greater than
@samp{0777}.  The default umask is @samp{022}.
@end deffn

@deffn {Rule Config} chroot @var{dir}
Change the root directory to that specified in @var{dir}.  This
directory will be used for file names beginning with @samp{/}.
A tilde (@samp{~}) in the beginning of @var{dir} is replaced with
the user's home directory.
@end deffn

The directory @var{dir} must be properly set up to execute the 
commands.  For example, the following rule defines execution of
@command{sftp-server} in an environment, chrooted to the user's home
directory:

@smallexample
@group
rule sftp
  command ^.*/sftp-server
  transform[0] s,.*,bin/sftp-server,
  chroot ~
@end group
@end smallexample

For this to work, each user's home must contain the directory
@file{bin} with a copy of @file{sftp-server} in it, as well as all 
directories and files that are needed for executing it, in particular
@file{lib}.

@deffn {Rule Config} chdir @var{dir}
Change to the directory @var{dir}.  The argument is subject to
tilde-expansion (see @code{chroot}, above).  If both @code{chdir} and
@code{chroot} are specified, then @code{chroot} is executed first.
@end deffn

@deffn {Rule Config} limits @var{res}
Impose limits on system resources, as defined by @var{res}.  The
argument consists of @dfn{commands}, optionally separated by any
amount of whitespace.  A command is a single command letter followed
by a number, that specifies the limit.  The command letters are
case-insensitive and coincide with those used by the shell @code{ulimit}
utility:

@multitable @columnfractions 0.3 0.6 
@headitem Command @tab  The limit it sets
@item     A       @tab  max address space (KB)
@item     C       @tab  max core file size (KB)
@item     D       @tab  max data size (KB)
@item     F       @tab  maximum file size (KB)
@item     M       @tab  max locked-in-memory address space (KB)
@item     N       @tab  max number of open files
@item     R       @tab  max resident set size (KB)
@item     S       @tab  max stack size (KB)
@item     T       @tab  max CPU time (MIN)
@item     U       @tab  max number of processes
@item     L       @tab  max number of logins for this user (see below)
@item     P       @tab  process priority -20..20 (negative = high priority)
@end multitable

For example:

@smallexample
limits T10 R20 U16 P20
@end smallexample

@cindex simultaneous sessions
@cindex limiting number of simultaneous sessions
@anchor{L limit}
If some limit cannot be set, execution of the rule aborts.  In
particular, @samp{L} limit can be regarded as a condition, rather than
action.  Setting limit @code{limit L@var{n}} succeeds only if no
more than @var{n} @code{rush} instances are simultaneously running for
the same user.  This can be used to limit the number of simultaneously
open sessions. 

The use of @samp{L} resource automatically enables @dfn{forked mode}.
@xref{Accounting and Forked Mode}, for more information about it.
@end deffn

@node Environment
@subsection Environment
@cindex Environment

The @code{env} action allows to modify the environment in which the
program will be executed.

@deffn {Rule Config} env @var{args}
Modify the environment.
@end deffn

Its argument is a whitespace-delimited list of specifiers.  The
following specifiers are understood: 

@table @asis
@item - (a dash)
Clear the environment.  This is understood only when used as a first
word in @var{args}.

@item -@var{name}
Unset the environment variable @var{name}.

@item -@var{name}=@var{val}
Unset the environment variable @var{name} only if its value is @var{val}.

@item @var{name}
Retain the environment variable @var{name}.

@item @var{name}=@var{value}
Define environment variable @var{name} to have given @var{value}.

@item @var{name}+=@var{value}
Retain variable @var{name} and append @var{value} to its existing
value.  If no such variable is present in the environment, it is
created and @var{value} is assigned to it.  However, if @var{value}
begins with a punctuation character, this character is removed from it
before the assignment.  This is convenient for using this construct with
environment variables like @env{PATH}, e.g.:

@smallexample
PATH+=:/sbin
@end smallexample

In this example, if @env{PATH} exists, @samp{:/sbin} will be appended
to it.  Otherwise, it will be created and @samp{/sbin} will be
assigned to it.

@item @var{name}=+@var{value}
Retain variable @var{name} and prepend @var{value} to its existing
value.  If no such variable is present in the environment, it is
created and @var{value} is assigned to it.  However, if @var{value}
ends with a punctuation character, this character is removed from it
before assignment. 
@end table

@node Fall-through
@subsection Fall-through
@cindex fall-through rule
A @dfn{fall-through} rule is a special rule that does not execute the
requested command.  When a matching fall-through rule is encountered,
@command{rush} evaluates it and continues scanning its configuration
for the next matching rule.  Any @code{transform} and @code{env}
actions found in a fall-through rule take effect immediately, which
means that subsequent rules will see modified command line and
environment.  Execution of any other actions from a fall-through rule
is delayed until a usual rule is found.

A fall-through rule is declared using the following statement:

@deffn {Rule Config} fall-through
Declare a fall-through rule.
@end deffn

Usually this statement is placed as the last statement in a rule, e.g.:

@smallexample
@group
rule default
  umask 002
  env - HOME USERNAME PATH
  fall-through
@end group
@end smallexample

Fall-through rules provide a way to set default values for subsequent
rules.  For example, any rules that follow the @samp{default} rule
shown above, will inherit the umask and environment set there.

One can also use fall-through rules to ``normalize'' command lines.
For example, consider this rule:

@smallexample
@group
rule default
  transform[0] s|.*/||;
  fall-through
@end group
@end smallexample

It will remove all path components from the first command line argument.
As a result, all subsequent rules may expect a bare binary name as the
first argument.

Yet another common use for such rules is to enable accounting (see the
next subsection), or set resource limits for the rest of rules:

@smallexample
@group
rule default
  limit l1
  fall-through
@end group
@end smallexample

@node Accounting and Forked Mode
@subsection Accounting and Forked Mode
@cindex accounting
  Rush is able to operate in two modes, which we call default and
forked.  When operating in the default mode, the process image of
@command{rush} itself is overwritten by the command being executed.
Thus, when it comes to the launching of the requested command,
the running instance of @command{rush} ceases to exist.

@cindex forked mode
  There is also another operation mode, which we call @dfn{forked
mode}.  When running in this mode, @command{rush} executes the
requested command in a subprocess, and remains in memory supervising
its execution.  Once the command terminates, @command{rush} exits.

  One advantage of the forked mode is that it allows to run
@dfn{accounting}, i.e. to note who is doing what and to keep a
history of invocations.  The accounting, in turn, can be used to limit
simultaneous executions of commands by the users (@dfn{logins}, in
Rush terminology), as requested by @samp{L} command to @code{limit}
statement (@pxref{L limit}).

  The forked mode is enabled on a per-rule basis, for rules that
contain either @samp{L} command in the @code{limit} statement, or
@samp{acct on} command:

@deffn {Rule Config} acct @var{bool}
Turn accounting mode on or off, depending on @var{bool}.  The argument
can be one of the following: @samp{yes}, @samp{on}, @samp{t}, 
@samp{true}, or @samp{1}, to enable accounting, and @samp{no},
@samp{off}, @samp{nil}, @samp{false}, @samp{0}, to disable it.

Notice, that there is no need in explicit @code{acct on} command, if
you use @command{limit L}.
@end deffn

The notion @samp{rule contains}, used above, means that either the
rule in question contains that statement, or it inherits it from one
of the above fall-through rules (@pxref{Fall-through}).  In fact, in
most cases the accounting should affect all rules, therefore we
suggest to enable it in a fall-through rule at the beginning of the
configuration file, e.g.:

@smallexample
rule default
  acct on
  fall-through 
@end smallexample

If the need be, you can disable it for some of the subsequent rules by
placing @code{acct off} in it.  Notice, that this will disable
accounting only, the forked mode will remain in action.  To disable it
as well and enforce default mode for a given rule, use @code{fork off}
statement:

@deffn {Rule Config} fork @var{bool}
Enable or disable forked mode.  This statement is mainly designed as a
way of disabling the forked mode for a given rule.
@end deffn

  Once the accounting enabled, you can view the list of currently
logged in users using @code{rushwho} command (@pxref{Rushwho}) and
view the history of last logins using @code{rushlast} command
(@pxref{Rushlast}).

@node Exit
@subsection Exit rule
@cindex exit rule
  An @dfn{exit} rule does not execute any commands.  Instead, it writes
the supplied error message to the specified file descriptor and exits
immediately.  An exit rule is defined using the following statement:

@deffn {Rule Config} exit @var{fd} @var{message}
@deffnx {Rule Config} exit @var{message}
Write textual message @var{message} to a file descriptor, given by
optional argument @var{fd}.  If @var{fd} is absent, @samp{2} (standard
error) is used.
@end deffn

The @var{message} argument is subject to backslash interpretation,
during which the following @dfn{escape sequences} are replaced with
the corresponding single characters, as described in the table below:

@float Table, backslash-interpretation
@caption{Backslash escapes}
@multitable @columnfractions 0.30 .5
@item Sequence @tab Replaced with
@item \a @tab Audible bell character (@acronym{ASCII} 7)
@item \b @tab Backspace character (@acronym{ASCII} 8)
@item \f @tab Form-feed character (@acronym{ASCII} 12)
@item \n @tab Newline character (@acronym{ASCII} 10)
@item \r @tab Carriage return character (@acronym{ASCII} 13)
@item \t @tab Horizontal tabulation character (@acronym{ASCII} 9)
@item \\ @tab A single backslash (@samp{\}).
@end multitable
@end float

Any escape sequence not listed in this table is replaced with its
second character.

For example (note the use of line continuation character):

@smallexample
exit \
    \r\nYou are not allowed to execute that command.\r\n\
    \r\nIf you think this is wrong, ask <foo@@bar.com> for assistance.\r\n
@end smallexample

@cindex trap rule
Exit actions are useful for writing @dfn{trap rules}, i.e. rules that
are intended to trap incorrect or prohibited command lines and to return
customized reply messages in such cases.  Consider the following
rule:

@smallexample
@group
rule git
  command ^git-.+
  match[1] ^/sources/[^ ]+\.git$
  transform s|.*|/usr/bin/git-shell -c "&"|
@end group
@end smallexample

It allows to use only those Git repositories that are located under
@file{/sources} directory.  If a user tries to access a repository
outside this root, he will be returned a default error message, saying
@samp{You are not permitted to execute this command} (@pxref{Error
Messages, usage-error}).  You can, however, provide a more convenient
message in this case.  To do so, place the following after the
@samp{git} rule: 

@smallexample
@group
rule git-trap
  command ^git-.+
  exit fatal: Use of this repository is prohibited.
@end group
@end smallexample

This rule will trap all git invocations that do not match the
@samp{git} rule.

@node Debugging
@section Debugging
@cindex debugging
  The @code{debug} statement sets the @dfn{debugging level} -- an
integer value that controls the verbosity of @command{rush}:

@deffn {Configuration} debug @var{num}
Set the debugging level to @var{num}.
@end deffn

  The greater @var{num} is, the more verbose is shell's logging.  The
debugging information is reported via @code{syslog} at facility
@samp{authpriv}, priority @samp{debug}.  As of version @value{VERSION},
the following debugging levels are supported: 

@cindex debugging levels
@table @asis
@item 1
A minimum debugging level, and the only one whose messages are logged
using the priority @samp{notice}.  At this level, @command{rush} only
logs requests and rules selected to handle them.  For example:

@smallexample
rush[16821]: Serving request "/usr/libexec/sftp-server"
for sergiusz by rule sftp-savane
@end smallexample

@item 2
List all actions executed when serving requests.

@item 3
Verbosely describe parsing of the configuration file.
@end table

  More debugging levels may be implemented in future.  

@node Regex
@section Regex
@cindex regular expressions
@cindex extended regular expressions
@cindex basic regular expressions

The @code{regex} statement configures the flavor of regular
expressions for use by subsequent @code{command}, @code{match} and
@code{transform} statements.

@deffn {Configuration} regex @var{regex-flags}
Configure the type of regular expressions.
@end deffn

@var{Regex-flags} is a whitespace-separated list of flags.
Each flag is a word specifying some regular expression 
feature.  It can be preceded by @samp{+} to enable this feature (this
is the default), or by @samp{-} to disable it.  Valid flags are:

@table @samp
@item extended
Use @acronym{POSIX} Extended Regular Expression syntax when
interpreting regex.  This is the default.

@item basic
Use basic regular expressions.  Equivalent to @samp{-extended}.

@item icase
Do not differentiate case.  Subsequent regex matches will be case
insensitive. 
@end table

For example, the following statement enables @acronym{POSIX} extended,
case insensitive matching:

@smallexample
regex +extended +icase
@end smallexample

The @code{regex} settings affect subsequent @code{command} and
@code{match} statements (@pxref{Conditions}), and remain in effect
until next @code{regex} statement or the end of configuration file,
whichever occurs first.

@node Sleep Time
@section Sleep Time

@deffn {Configuration} sleep-time @var{number}
Set the time in seconds to sleep before exiting on error.  
@end deffn

This statement is intended as a measure against brute-force attacks.
Default sleep time is 5 seconds.

@node Error Messages
@section Error Messages
@cindex error messages

A set of statements configures textual messages that @command{rush}
returns to the user if an error of some class occurs.  All of them
take a single argument which is subject to backslash interpretation,
as described in @ref{Exit, backslash interpretation}. 

@deffn {Configuration} usage-error @var{text}
Define a textual message which is returned to the remote party if a
usage error occurs.  

Default is:

@smallexample
You are not permitted to execute this command.
@end smallexample
@end deffn

@deffn {Configuration} nologin-error @var{text}
Define a textual message which is returned to the remote user if
there is no such user name in the password database.  

Default is:

@smallexample
You do not have interactive login access to this machine.
@end smallexample
@end deffn

@deffn {Configuration} config-error @var{text}
Define a textual message which is returned to the remote party on
Rush configuration errors.  

Default is:

@smallexample
Local configuration error occurred.
@end smallexample
@end deffn

@deffn {Configuration} system-error @var{text}
Define a textual message which is returned to the remote party if
a system error occurs. 

Default message is:

@smallexample
A system error occurred while attempting to execute command.
@end smallexample
@end deffn

@node Usage Tips
@chapter Usage Tips
In this chapter we will explain how to write Rush configuration rules
for several popular remote copy and version control system
utilities.  For this purpose, we assume the following setup:

@itemize @bullet
@item Users are allowed to use @code{scp} and @code{rsync} to upload
files to the @file{/incoming} directory and to copy files to and from
their @file{~/public_html} directory.  
The @file{/incoming} directory is located on server in @file{/home/ftp}
directory, but that is transparent to users, i.e. they use
@code{scp @var{file} @var{host}:/incoming} (not
@code{@var{host}:/home/ftp/incoming}) to upload files.

@item Additionally, users may use @command{sftp} to manage their
@file{~/public_html} directory.  In this case, to prevent users from
accessing other directories, @command{sftp-server} is executed in a
chrooted environment. 

@item The server runs three version control system repositories, whose
corresponding repositories are located in the following directories:

@multitable @columnfractions 0.3 0.7
@headitem VCS @tab Repository Root
@item cvs     @tab /cvsroot
@item svn     @tab /svnroot
@item git     @tab /gitroot
@end multitable
@end itemize

@menu
* scp::
* rsync::
* sftp::
* cvs::
* svn::
* git::
@end menu

@node scp
@section scp
@cindex scp
The @code{scp} utility is executed on the server side
with option @option{-t}, when copying files to server, and with
@option{-f} when copying from it.  Thus, the basic templates for
@code{scp} rules are:

@smallexample
# Copying to server:
rule scp-to
  command ^scp -t
  ...

# Copying from server:  
rule scp-from
  command ^scp -f
  ...
@end smallexample

You may also wish to allow for @option{-v} (@samp{verbose}) command
line option.  In this case, the @samp{scp-to} rule will become:

@smallexample
rule scp-to
  command ^scp (-v )?-t
  ...
@end smallexample

First, we want users to be able to upload files to
@file{/home/ftp/incoming} directory.  Moreover, the @file{/home/ftp}
directory prefix must be invisible to them.  We must also make sure
that the user cannot get outside the @file{incoming} directory by using
@file{../} components in his upload path.  So, our first rule for
@code{scp} uploads will be:

@smallexample
rule scp-to-incoming
  command ^scp (-v )?-t /incoming/
  match[$] ! \.\./
  transform[0] s|.*|/bin/scp|
  transform[$] s|^|/home/ftp/|
@end smallexample

The @code{match[$]} statement ensures that no relative components are
used.  Two transform rules ensure that the right @command{scp} binary
is used and that @file{/home/ftp} prefix is prepended to the upload
path.

Other than uploading to @file{/incoming}, users must be able to use
@command{scp} to manage @file{public_html} directories located in
their homes.  They should use relative paths for that, i.e., the
command:

@smallexample
$ scp file.html server:
@end smallexample

@noindent
will copy file @file{file.html} to @file{~/public_html/file.html} on
the server.  The corresponding rule is:

@smallexample
rule scp-home
  command ^scp (-v )?-[tf] [^/].*
  match[$] ! \.\./
  transform[0] s|.*|/bin/scp|
  transform[$] s|^|public_html/|
  chdir ~
@end smallexample

Finally, we provide two trap rules for diagnostic purposes:

@smallexample
rule scp-to-trap
  command ^scp (-v )?-t
  exit Error: Uploads to this directory prohibited

rule scp-from  
  command ^scp (-v )?-f
  exit Error: Downloads from this directory prohibited
@end smallexample

@node rsync
@section rsync
@cindex rsync
On the server side, @command{rsync} is executed with the
@option{--server} command line option.  In addition, when copying
files from the server, the @option{--sender} option is used.  This
allows to discern between incoming and outgoing requests.

In our setup, @command{rsync} is used the same way as @command{scp}, so
the two rules will be:

@smallexample
rule rsync-incoming
  command ^rsync --server
  command ! --sender
  match[$] /incoming/
  match[$] ! \.\./
  transform[0] s|^|/usr/bin/|
  transform[$] s|^|/home/ftp/|

rule rsync-home
  command ^rsync
  match[$] ! ^[^/]
  match[$] ! \.\./
  transform[0] s|^|/usr/bin/|
  transform[$] s|^|public_html/|
  chdir ~
@end smallexample

The trap rules for @command{rsync} are trivial:

@smallexample
rule rsync-to-trap
  command ^rsync
  command --sender
  exit Error: Downloads from this directory prohibited

rule rsync-from-trap
  command ^rsync
  exit Error: Uploads to this directory prohibited
@end smallexample

@node sftp
@section sftp
@cindex sftp
Executing @command{sftp} on the client machine invokes
@command{sftp-server}, without arguments, on the server. 

We want to allow our users to use @command{sftp} to manage their
@file{public_html} directories.  The @command{sftp-server} will be
executed with the user's home directory as root, in a chrooted
environment.  For this to work, each user's home must contain a copy
of @command{sftp-server} (which we'll place in @file{~/bin}
subdirectory) and all files it needs for normal execution: 
@file{/etc/group} and @file{/etc/passwd} with one entry
(for the user and his group), and, unless the binary is linked
statically, all the shared libraries it is linked with, in the
subdirectory @file{~/lib}.

Given these prerequisites, the following rule will ensure proper
@command{sftp} interaction:

@smallexample
rule sftp-incoming
  command ^.*/sftp-server
  transform[0] s,.*,/bin/sftp-server,
  chroot ~
  chdir public_html
@end smallexample

Notice the last action.  Due to it, users don't have to type @code{cd
public_html} at the beginning of their sftp sessions.

@node cvs
@section cvs
@cindex cvs
Using @command{cvs} over @code{ssh} invokes @command{cvs server} on
the server machine.  In the simplest case, the following rule will do
to give users access to @acronym{CVS} repositories:

@smallexample
@group
rule cvs
  command ^cvs server
  transform s|^cvs|/usr/bin/cvs -f
@end group
@end smallexample

However, @command{cvs} as of version 1.12.13 does not allow to limit root
directories that users are allowed to access.  It does have
@option{--allow-root} option, but unfortunately this option is ignored when
invoked as @command{cvs server}.  To restrict possible roots, we have
to run @command{cvs} in a chrooted environment.  Let's suppose we
created an environment for @command{cvs} in directory @file{/var/cvs},
with the @command{cvs} binary located in @file{/var/cvs/bin} and
repository root directory being @file{/var/cvs/cvsroot}.  Then, we can
use the following rule: 

@smallexample
rule cvs
  command ^cvs server
  transform s|^|/bin/cvs
  chroot /var/cvs
@end smallexample

@node svn
@section svn
@cindex svn
Remote access to @acronym{SVN} repositories is done via
@command{svnserve} binary.  It is executed on server with @option{-t}
option.  The @option{-r} option can be used to restrict access to a
subset of root directories.  So, we can use the following rule:

@smallexample
@group
rule svn
  command ^svnserve -t
  transform s|-r *[^ ]*||;s|^svnserve |/usr/bin/svnserve -r /svnroot|
@end group
@end smallexample

The @code{transform} action removes any @option{-r} options the user
might have specified and enforces a singe root directory.  A more
restrictive action can be used to improve security:

@smallexample
  transform s|.*|/usr/bin/svnserve -r /svnroot|
@end smallexample

@node git
@section git
@cindex git
@cindex git-receive-pack
@cindex git-upload-pack
@cindex git-shell
Remote access to Git repositories over ssh causes execution of
@code{git-receive-pack} and @code{git-upload-pack} on the server.
The simplest rule for Git is:

@smallexample
@group
rule git
  command ^git-(receive|upload)-pack
  transform[0] s|^|/usr/bin/|
@end group
@end smallexample

The @code{transform} action is necessary to ensure the proper location
of Git binaries to use.  This example supposes they are placed in
@file{/usr/bin}, you will have to tailor it if they are located
elsewhere on your system.

To limit Git accesses to repositories under @file{/gitroot} directory, use
@code{match[1]} construct, as shown in the example below:

@smallexample
@group
rule git
  command ^git-(receive|upload)-pack
  match[1] ^/gitroot[^ ]+\.git$
  transform[0] s|^|/usr/bin/|
@end group
@end smallexample

To provide more helpful error messages, you may follow this rule by a
trap rule (@pxref{Exit, trap rules}):

@smallexample
@group
# @r{Trap the rest of Git requests:}
rule git-trap
  command ^git-.+
  exit fatal: access to this repository is denied.
@end group
@end smallexample

@node Test Mode
@chapter Test Mode
@cindex test mode
@cindex testing configuration file
@cindex configuration file, testing
@opindex --test
@opindex --lint
@opindex -c
  Rush provides a special @dfn{test mode}, intended to test
configuration files and to emulate execution of commands.  The test
mode is enabled by @option{--test} command line option (aliases:
@option{--lint}, @option{-t}).  When Rush is given this option, the 
following occurs:

@enumerate 1
@item All diagnostic messages are redirected to standard error, instead of
syslog.

@item If a single non-option argument is present, it is taken as a
name of the configuration file to use.

@item The configuration file is parsed.  If parsing fails, the program
exits with code 1.

@item If the @option{-c} option is present, @command{rush} processes
its argument as usual (@pxref{Operation}), except that the command
itself is not executed.
@end enumerate

An exit status of 0 means no errors, 1 means an error has occurred.

@optindex --user
@optindex -u
You may also emulate access by a particular user, by supplying his
user name via the @option{--user} (@option{-u}) option.  This option
implies @option{--test}.

@opindex --debug
@opindex -d
In test mode, you may set debugging level (@pxref{Debugging}) from the
command line, using the @option{--debug} (@option{-d}) command line
option.  It expects a single number specifying debugging level as its
argument.  The debugging level set this way overrides settings
from the configuration file.

  Following are several examples that illustrate the use of test mode
in various cases:

@enumerate 1
@item Test default configuration file:

@smallexample
$ rush --test
@end smallexample

@item Test configuration file @file{sample.rc}:

@smallexample
$ rush --test sample.rc
@end smallexample

@item Test the configuration file and emulate execution of the command
@command{cvs server}.  Use debugging level 2:

@smallexample
$ rush --test --debug=2 -c "cvs server"
@end smallexample

@item Same, but for user @samp{jeff}:

@smallexample
$ rush --user=jeff --debug=2 -c "cvs server"
@end smallexample

Note, that you don't need to specify @option{--test} along with
@option{--user}.

@item Same, but use @file{sample.rc} instead of the default
configuration file:

@smallexample
$ rush --test --debug=2 -c "cvs server" sample.rc
@end smallexample
@end enumerate

@node Option Summary
@chapter Option Summary
@cindex options, command line
This chapter provides a short summary of Rush command line options.

@table @option
@item -c @var{command}
Specify the command to run.

@item --debug=@var{number}
@itemx -d @var{number}
Set debugging level.

@item --test
@itemx --lint
@itemx -t
Run in test mode. An optional argument may be used with this option
to specify alternative configuration file name, e.g.:

@smallexample
$ rush --lint ./test.rc
@end smallexample

If the @option{-c} option is also specified, @command{rush} emulates the
normal processing for the command, but does not execute it.

@item --user=@var{name}
@itemx -u @var{name}
Emulate access by user @var{name}.  This option implies
@option{--test} and is valid only when used by root and in conjunction
with the @option{-c} option.

@item --version
@itemx -v
Display program version.

@item --help
@itemx -h
Display a short help message.

@item --usage
Display a concise usage summary.
@end table

@node Rushwho
@chapter The @code{rushwho} utility.
@prindex rushwho
The @command{rushwho} utility displays the list of users who are
currently using @command{rush}.  The utility operates
on default Rush database, which is maintained if @command{rush}
runs in accounting mode (@pxref{Accounting and Forked Mode}).  The following
is a sample output from @code{rushwho}:

@smallexample
Login      Rule     Start     Time       PID      Command
jeff       sftp     Sun 12:17 00:58:26   10673    bin/sftp-server
@end smallexample

The information displayed is:

@table @asis
@item Login
The login name of the user.

@item Rule
The tag of the rule he is served under (@pxref{Rule, tag}).  

@item Start
Time when the rule began execution.

@item Time
Duration of the session.

@item PID
PID of the running command.

@item Command
Command being executed.
@end table

This format is a built-in default, it can be changed using
@option{--format} command line option.

@menu
* Rushwho Options::
* Formats::
@end menu

@node Rushwho Options
@section Rushwho Options
@cindex rushwho, command line options

This section summarizes the command line options understood by
@command{rushwho} utility.

@table @option
@anchor{format option}
@item --format=@var{string}
@itemx -F @var{string}
Use @var{string} instead of the default format, described in
@ref{Rushwho}.  @xref{Formats}, for a detailed description of the
output format syntax.  If @var{string} begins with a @samp{@@}, then
this character is removed from it, and the resulting string is
regarded as a name of a file to read.  The contents of this file is
the format string.  The file is read literally, except that lines
beginning with @samp{;} are ignored (they can be used to introduce
comments).  For example, @command{rushwho --format=@@formfile} reads
in the contents of the file named @file{formfile}.

@item --file=@var{dir}
@itemx -f @var{dir}
Use database directory @var{dir}, instead of the default.
By default, database files are located in @file{/usr/local/var/rush}.

@item --no-header
@itemx -H
Do not display header line.

@item --version
@itemx -v
Display program version.

@item --help 
@itemx -h
Display a short help message.

@item --usage
Display a concise usage summary.
@end table

@node Formats
@section Output Formats
@cindex output formats

A format string controls the output of every record from Rush
accounting database.  It may contain following four types of objects:

@table @asis
@item Ordinary characters
These are copied to the output verbatim.

@item Escapes
An escape is a backslash (@samp{\\}), followed by a single character.
It is interpreted as follows:

@multitable @columnfractions 0.30 .5
@item Escape @tab Output
@item \a @tab Audible bell character (@acronym{ASCII} 7)
@item \b @tab Backspace character (@acronym{ASCII} 8)
@item \e @tab Escape character (@acronym{ASCII} 27)
@item \f @tab Form-feed character (@acronym{ASCII} 12)
@item \n @tab Newline character (@acronym{ASCII} 10)
@item \r @tab Carriage return character (@acronym{ASCII} 13)
@item \t @tab Horizontal tabulation character (@acronym{ASCII} 9)
@item \\ @tab A single backslash (@samp{\})
@item \" @tab A double-quote.
@end multitable

Any escape not listed in the table above results in its second
character being output.

@item Quoted strings
Strings are delimited by single or double quotes.  Within a string
any escape sequences are interpreted as described above.

@item Format specifications
A @dfn{format specification} is a kind of function, which outputs
a particular piece of information from the database record.
@end table

Each format specification starts with an opening brace and ends with
a closing brace.  The first word after the brace is the name of the
format specification.  The rest of words are @dfn{positional arguments}
followed by @dfn{keyword arguments}.  Both are optional.  Keyword
arguments must follow the positional arguments.  A keyword argument
begins with a colon.
For example:

@table @code
@item (time)
A single format specification.

@item (time 10)
The same format specification with the output width limited to 10
characters.

@item (time 10 Duration)
The @samp{time} format specification, with the output width limited to 10
characters and @samp{Duration} as a header title.

@item (time 10 "Session Duration" :right :format %H:%M)
The same with two keyword arguments: @samp{:right} and
@samp{:format}.  The latter takes the string @samp{%H:%M} as its
argument.  Notice the use of quoted string to preserve the
whitespace.
@end table

The full list of format specifications follows.

@deffn {Format Spec} newline [@var{count}]
Causes the newline character to be output.  If the optional @var{count}
is supplied, that many newlines will be printed
@end deffn

@deffn {Format Spec} tab [@var{num}]
Advance to the next tab stop in the output stream.  If optional @var{num}
is present, then skip @var{num} tab stops.  Each tab stop is eight
characters long.
@end deffn

The following specifications output particular fields of a database
record.  They all take two positional arguments: @var{width} and
@var{title}.

The first argument, @var{width} sets the maximum output
length for this specification.  If the number of characters actually output
is less than the width, they will be padded with whitespace either to
the left or to the right, depending on the presence of the @code{:right}
keyword argument.  If the number of characters is greater than
@var{width}, they will be truncated to fit.  If @var{width} is
not given, the exact data are output as is.

The second argument, @var{title}, gives the title of this column for
the heading line.  By default no title is output.

Every field specification accepts at least two keyword arguments.
The keyword @code{:right} may be used to request alignment to the right
for the data.  This keyword is ignored if @var{width} is not given.

The keyword @code{:empty} followed by a string causes @command{rushwho}
to output that string if the resulting value for this specification
would otherwise be empty.

@deffn {Format Spec} user @var{width} @var{title} [:empty @var{repl}][:right]
Print the user login name.
@end deffn

@deffn {Format Spec} time @var{width} @var{title} @
       [:empty @var{repl}][:right][:format @var{date-format}]
@deffnx {Format Spec} start-time @var{width} @var{title} @
       [:empty @var{repl}][:right][:format @var{date-format}]
       
Date and time when the session started.

The @code{:format} keyword introduces the @code{strftime} format string
to be used when converting the date for printing.  The default value is
@samp{%a %H:%M}.  @xref{Time and Date Formats}, for a detailed
description of @code{strftime} format strings.
@end deffn

@deffn {Format Spec} stop-time @var{width} @var{title} @
        [:empty @var{repl}][:right][:format @var{date-format}]
Time when the command finished.  This specifier has sense only for
@command{rushlast} (@pxref{Rushlast}).  If the command is still
running, the word @samp{running} is output.
@end deffn

@deffn {Format Spec} duration @var{width} @var{title} @
       [:empty @var{repl}][:right]
Total time of the session duration.
@end deffn

@deffn {Format Spec} rule @var{width} @var{title} [:right]
The tag of the rule used to serve the user.  @xref{Rule, tag}, for a
detailed description of rules and tags.
@end deffn

@deffn {Format Spec} command @var{width} @var{title} @
       [:empty @var{repl}][:right]
Command line being executed.
@end deffn

@deffn {Format Spec} pid @var{width} @var{title} [:right]
PID of the process.
@end deffn

For example, the following is the default format for the
@command{rushwho} utility.  It is written in a form, suitable for use
in a file supplied with the @option{--format=@@@var{file}} command
line option (@pxref{format option}):

@smallexample
(user 10 Login)" "
(rule 8 Rule)" " 
(start-time 0 Start)" " 
(duration 9 Time)" "
(pid 10 PID)" "
(command 28 Command)
@end smallexample

@node Rushlast
@chapter The @code{rushlast} utility.
@prindex rushlast
The @command{rushlast} utility searches back through the Rush database
and displays a list of all user sessions since the database was
created.  By default, it displays the following information:

@smallexample
Login      Rule     Start     Stop      Time    Command
sergiusz   rsync    Sun 20:43 Sun 20:43 05:57   /usr/bin/rsync /upload
jeff       sftp-sav Sun 20:09 running   07:17   /bin/sftp-server
@end smallexample

@table @asis
@item Login
The login name of the user.

@item Rule
The tag of the rule he is served under (@pxref{Rule, tag}).

@item Start
Time when the rule began execution.

@item Start
Time when the command finished, or the word @samp{running} if it is
still running.

@item Time
Duration of the session.

@item Command
Command being executed.
@end table

This format is a built-in default, and can be changed using
@option{--format} command line option (@pxref{Rushlast Options}).

@menu
* Rushlast Options::
@end menu

@node Rushlast Options
@section Rushlast Options

This section summarizes the command line options understood by
@command{rushlast} utility.

@table @option
@item --format=@var{string}
@itemx -F @var{string}
Use @var{string} instead of the default format, described in
@ref{Rushwho}.  @xref{Formats}, for a detailed description of the
output format syntax.  If @var{string} begins with a @samp{@@}, then
this character is removed from it, and the resulting string is
regarded as a name of a file to read.  The contents of this file is
the format string.  The file is read literally, except that lines
beginning with @samp{;} are ignored (they can be used to introduce
comments).  For example, @command{rushwho --format=@@formfile} reads
in the contents of the file named @file{formfile}.

@item --file=@var{dir}
@itemx -f @var{dir}
Use database directory @var{dir}, instead of the default.
By default, database files are located in @file{/usr/local/var/rush}.

@item --forward
Display entries in chronological order, instead of the reverse
chronological one, which is the default.

@item --count=@var{number}
@itemx -n @var{number}
@itemx -@var{number}
Show at most @var{number} records.  The form @option{-@var{number}} is
provided for compatibility with the @cite{last(1)} utility.

@item --no-header
@itemx -H
Do not display header line.

@item --version
@itemx -v
Display program version.

@item --help 
@itemx -h
Display a short help message.

@item --usage
Display a concise usage summary.
@end table

@node Accounting Database
@chapter Accounting Database
@cindex accounting database
  Rush accounting database is stored in the directory
@file{@var{localstatedir}/rush}, where @var{localstatedir} stands for
the name of the local state directory, set on compile time.  By
default, it is @file{@var{prefix}/var}, where @var{prefix} is the
installation prefix, which defaults to @file{/usr/local}.  Thus, the
default database directory is @file{/usr/local/var/rush}.  You can
change this default by using @option{--localstatedir} option to
@command{configure} before compiling the package.  The
@option{--prefix} option affects it as well.

@cindex @file{utmp} file, accounting database
@cindex @file{wtmp} file, accounting database
  As of version @value{VERSION}, the database consists of two files,
called @file{utmp} and @file{wtmp}.  The @file{wtmp} file keeps
information about all user sessions, both finished and still active.
The @file{utmp} file contains indices to those records in @file{wtmp},
which represent active sessions.

  The @file{wtmp} grows continuously, while @file{utmp} normally
grows the first day or two after enabling accounting mode, and from then on
its size remains without changes.  If you set up log file rotation,
e.g. by using @command{logrotate} (@pxref{logrotate,,logrotate,logrotate(8),
logrotate man page}), or a similar tool, it is safe to rotate
@file{wtmp} without notifying @command{rush}. @FIXME{This could
interfere with the functionality of @command{radwho}.  Verify it}.
It is usually not necessary to rotate @file{utmp}, though.

  The following sections contain a detailed description of the
structure of these two files.  You may skip them, if you are not
interested in technical details.

@menu
* wtmp::        The Structure of @file{wtmp} File.
* utmp::        The Structure of @file{wtmp} File.
@end menu

@node wtmp
@section The @file{wtmp} file
@cindex @file{wtmp}
  The @file{wtmp} file consists of variable-size entries. It is
designed so that it can easily be read in both directions.

  Each record begins with a fixed-size header, which is followed by
three zero-terminated strings, and the record size in @code{size_t}
representation.  The three strings are, in that order: the user login
name, the rule tag, and the full command line.

  The header has the following structure:

@smallexample
@group
struct rush_wtmp @{
        size_t reclen;
        pid_t pid;
        struct timeval start;
        struct timeval stop;
        char *unused[3];
@};
@end group
@end smallexample

@noindent
where:

@table @code
@item reclen
is the length of the entire record, including the size of this
header.  This field is duplicated at the end of the record.

@item pid
is the PID of the command executed for the user.

@item start
represents the time of the beginning of the user session.

@item stop
represents the time when the user session finished.  If the session is
still running, this field is filled with zeros.

@item unused
The three pointers at the end of the structure are used internally bu
@command{rush}.  On disk, these fields are always filled with zeros.
@end table

@node utmp
@section The @file{utmp} file
@cindex @file{utmp}
  The @file{utmp} file consists of a fixed-size records of the
following structure:

@smallexample
@group
struct rush_utmp @{
        int status;
        off_t offset;
@};
@end group
@end smallexample

The fields have the following meaning:

@table @code
@item status
Status of the record: @samp{0} if the record is unused, and @samp{1}
if it represents an active session.

@item offset
Offset to the corresponding record in @file{wtmp} (see previous
section).
@end table

@node Reporting Bugs
@chapter How to Report a Bug

  Email bug reports to @email{bug-rush@@gnu.org.ua}.  Please include a
detailed description of the bug and information about the conditions
under which it occurs, so we can reproduce it.  To facilitate the
task, the following list shows the basic set of information that is
needed in order to find the bug:

@itemize
@item Package version you use.  
@item A detailed description of the bug.
@item Conditions under which the bug appears.
@item It is often helpful to send the contents of @file{config.log}
file along with your bug report. This file is created after running
@command{./configure} in the Rush source root directory.
@end itemize

@node Time and Date Formats
@appendix Time and Date Formats
@include strftime.texi

@node Copying This Manual
@appendix GNU Free Documentation License
@include fdl.texi

@node Concept Index
@unnumbered Concept Index

This is a general index of all issues discussed in this manual.

@printindex cp

@bye

